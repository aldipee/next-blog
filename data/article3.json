{
  "type_of": "article",
  "id": 580805,
  "title": "Tutorial - Create generative social images using SVG!",
  "description": "So... it's 2021. The web is an endless sea of beautiful, weird, terrifying stuff. How do you make sur...",
  "readable_publish_date": "Jan 25",
  "slug": "tutorial-create-generative-social-images-using-svg-2c47",
  "path": "/georgedoescode/tutorial-create-generative-social-images-using-svg-2c47",
  "url": "https://dev.to/georgedoescode/tutorial-create-generative-social-images-using-svg-2c47",
  "comments_count": 0,
  "public_reactions_count": 53,
  "collection_id": null,
  "published_timestamp": "2021-01-25T16:39:39Z",
  "positive_reactions_count": 53,
  "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--LsBQRdqF--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/h3lil398mkdjme2w0cb6.png",
  "social_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--n32ehXVf--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/h3lil398mkdjme2w0cb6.png",
  "canonical_url": "https://dev.to/georgedoescode/tutorial-create-generative-social-images-using-svg-2c47",
  "created_at": "2021-01-24T06:51:47Z",
  "edited_at": null,
  "crossposted_at": null,
  "published_at": "2021-01-25T16:39:39Z",
  "last_comment_at": "2021-01-25T16:39:39Z",
  "tag_list": "tutorial, webdev, javascript, design",
  "tags": ["tutorial", "webdev", "javascript", "design"],
  "body_html": "<p>So... it's 2021. The web is an endless sea of beautiful, weird, terrifying stuff. How do you make sure your site cuts through the noise? </p>\n\n<p>Well, alongside some great content, I think an awesome <strong>generative</strong> social image <em>(just like the one used for this tutorial!)</em> could be a good step along the way ✨</p>\n\n<p>Let’s make some!</p>\n\n\n<hr>\n\n<h1>\n  <a name=\"the-end-result\" href=\"#the-end-result\" class=\"anchor\">\n  </a>\n  The end result\n</h1>\n\n<p>First things first, let’s skip to the end. Here is the final result of this tutorial: </p>\n\n<p><iframe height=\"600\" src=\"https://codepen.io/georgedoescode/embed/PoGLmmX?height=600&amp;default-tab=result&amp;embed-version=2\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" loading=\"lazy\" style=\"width: 100%;\">\n</iframe>\n</p>\n\n<p>It's a scalable, editable, self-generating social image! If you click on the buttons in the CodePen above or change the text content, you should see the image magically re-design itself 🔮</p>\n\n\n<hr>\n\n<h1>\n  <a name=\"but-whats-it-actually-for\" href=\"#but-whats-it-actually-for\" class=\"anchor\">\n  </a>\n  But... what's it actually for?\n</h1>\n\n<p>A <em>\"social image\"</em> as I call them, or <em>\"meta image\"</em>, is the little preview that shows up in Slack / Twitter / Facebook whenever you paste a link.</p>\n\n<p>Here are some social image examples found in the wild...</p>\n\n<p>An awesome textured design from <a href=\"https://twitter.com/5t3ph\">Stephanie Eckles</a>:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--UsZBh2Eo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/snzbkyx9h95ynlxwr0ig.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--UsZBh2Eo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/snzbkyx9h95ynlxwr0ig.png\" alt=\"A custom, textured social image\" loading=\"lazy\"></a></p>\n\n<p>The much-loved social image from <a href=\"https://dev.to/\">DEV</a> + <a href=\"https://twitter.com/bendhalpern\">Ben Halpern</a>: </p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--R8ViCfVA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ae44nmwc93g73x7539b6.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--R8ViCfVA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ae44nmwc93g73x7539b6.png\" alt=\"DEV community social image\" loading=\"lazy\"></a></p>\n\n<p>Some very cool 3D vibes from <a href=\"https://twitter.com/JoshWComeau\">Josh Comeau</a>: </p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--CRsV-bSM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l7y5oaws07oinhpuuyma.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--CRsV-bSM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l7y5oaws07oinhpuuyma.png\" alt=\"A custom 3d style social image on Twitter\" loading=\"lazy\"></a></p>\n\n<p>Although all of my examples are from Twitter, it's important to remember <em>(and a huge benefit to creating your social images with SVG)</em> that different sites <strong>can</strong> require different dimensions. </p>\n\n<p>Luckily, through the power of <code>SVG</code> + <code>viewBox</code>, the images we are going to create in this tutorial can be simply resized to any dimensions/aspect ratio. Nice!</p>\n\n\n<hr>\n\n<h1>\n  <a name=\"blast-off\" href=\"#blast-off\" class=\"anchor\">\n  </a>\n  Blast off 🚀\n</h1>\n\n<p>OK, I think that's enough preamble. We are ready to start building. Overalls on, folks!</p>\n\n<h2>\n  <a name=\"html-markup\" href=\"#html-markup\" class=\"anchor\">\n  </a>\n  HTML Markup\n</h2>\n\n<p>First things first let's add some HTML for our page:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"wrapper\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"social-image-wrapper\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"c\">&lt;!-- Save a space for our SVG! --&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"controls\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"controls__randomize\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">\"controls__label\"</span><span class=\"nt\">&gt;</span>Randomize:<span class=\"nt\">&lt;/p&gt;</span>\n      <span class=\"nt\">&lt;button</span> <span class=\"na\">class=</span><span class=\"s\">\"controls__btn controls__btn--alignment\"</span><span class=\"nt\">&gt;</span>Alignment<span class=\"nt\">&lt;/button&gt;</span>\n      <span class=\"nt\">&lt;button</span> <span class=\"na\">class=</span><span class=\"s\">\"controls__btn controls__btn--colors\"</span><span class=\"nt\">&gt;</span>Colors<span class=\"nt\">&lt;/button&gt;</span>\n      <span class=\"nt\">&lt;button</span> <span class=\"na\">class=</span><span class=\"s\">\"controls__btn controls__btn--shapes\"</span><span class=\"nt\">&gt;</span>Shapes<span class=\"nt\">&lt;/button&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;button</span> <span class=\"na\">class=</span><span class=\"s\">\"controls__btn controls__btn--save\"</span><span class=\"nt\">&gt;</span>Save<span class=\"nt\">&lt;/button&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>In this code snippet, we are adding the HTML markup we need for our UI and popping everything inside a nice little wrapper <code>div</code>.</p>\n\n\n<hr>\n\n<h2>\n  <a name=\"svg-markup\" href=\"#svg-markup\" class=\"anchor\">\n  </a>\n  SVG Markup\n</h2>\n\n<p>Once we have added the HTML for the user interface it's for the main markup event. I mentioned earlier that our social images are going to be created using the <code>&lt;svg&gt;</code> element, so let's add one to our <code>social-image-wrapper</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"social-image-wrapper\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;svg</span>\n    <span class=\"na\">viewBox=</span><span class=\"s\">\"0 0 1200 630\"</span>\n    <span class=\"na\">xmlns=</span><span class=\"s\">\"http://www.w3.org/2000/svg\"</span>\n    <span class=\"na\">class=</span><span class=\"s\">\"social-image\"</span>\n  <span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;foreignObject</span> <span class=\"na\">x=</span><span class=\"s\">\"0\"</span> <span class=\"na\">y=</span><span class=\"s\">\"0\"</span> <span class=\"na\">width=</span><span class=\"s\">\"1200\"</span> <span class=\"na\">height=</span><span class=\"s\">\"630\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"social-image__html\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"social-image__text\"</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;h1</span>\n            <span class=\"na\">xmlns=</span><span class=\"s\">\"http://www.w3.org/1999/xhtml\"</span>\n            <span class=\"na\">class=</span><span class=\"s\">\"social-image__title\"</span>\n            <span class=\"na\">contenteditable</span>\n          <span class=\"nt\">&gt;</span>\n            All of this text is editable... click on it and start typing!\n          <span class=\"nt\">&lt;/h1&gt;</span>\n          <span class=\"nt\">&lt;h2</span>\n            <span class=\"na\">xmlns=</span><span class=\"s\">\"http://www.w3.org/1999/xhtml\"</span>\n            <span class=\"na\">class=</span><span class=\"s\">\"social-image__meta\"</span>\n            <span class=\"na\">contenteditable</span>\n          <span class=\"nt\">&gt;</span>\n            As you type, the background will adapt itself to the text, making\n            sure the shapes never overlap.\n          <span class=\"nt\">&lt;/h2&gt;</span>\n        <span class=\"nt\">&lt;/div&gt;</span>\n      <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/foreignObject&gt;</span>\n  <span class=\"nt\">&lt;/svg&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>There is quite a bit to unpack here but don't worry! We can work through it together 🤝</p>\n\n<h3>\n  <a name=\"viewbox\" href=\"#viewbox\" class=\"anchor\">\n  </a>\n  viewBox\n</h3>\n\n<p>First off, we are creating our <code>&lt;svg&gt;</code> element and defining a <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox\">viewBox</a>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;svg</span>\n  <span class=\"na\">viewBox=</span><span class=\"s\">\"0 0 1200 630\"</span>\n  <span class=\"na\">xmlns=</span><span class=\"s\">\"http://www.w3.org/2000/svg\"</span>\n  <span class=\"na\">class=</span><span class=\"s\">\"social-image\"</span>\n<span class=\"nt\">&gt;</span>\n  ...\n<span class=\"nt\">&lt;/svg&gt;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The <code>viewBox</code> attribute defines the coordinate space in which all of the contents of our <code>&lt;svg&gt;</code> will be drawn. In our case, this is <code>1200x630px</code>. </p>\n\n<p>Through the power of <code>viewBox</code>, we can position/scale everything relative to a fixed coordinate space, whilst the <code>&lt;svg&gt;</code> itself will be able to scale to any size. Powerful stuff ⚡</p>\n\n<h3>\n  <a name=\"foreignobject\" href=\"#foreignobject\" class=\"anchor\">\n  </a>\n  foreignObject\n</h3>\n\n<p>Next, we add a <code>foreignObject</code> tag filled with some HTML to our <code>&lt;svg&gt;</code> element:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;foreignObject</span> <span class=\"na\">x=</span><span class=\"s\">\"0\"</span> <span class=\"na\">y=</span><span class=\"s\">\"0\"</span> <span class=\"na\">width=</span><span class=\"s\">\"1200\"</span> <span class=\"na\">height=</span><span class=\"s\">\"630\"</span><span class=\"nt\">&gt;</span>\n  ...\n<span class=\"nt\">&lt;/foreignObject&gt;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>This is where things start getting interesting! <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject\">foreignObject</a> can be used to add content from another XML namespace (in our case, HTML) to an <code>&lt;svg&gt;</code> element. </p>\n\n<p>Once added, this <code>HTML</code> will automatically scale to the <code>viewBox</code> just like regular <code>SVG</code> content. This is incredibly powerful, as it allows us to style the contents of our social image using CSS whilst retaining the fluidity and rendering power of SVG. </p>\n\n<p>More on that shortly. </p>\n\n<p><strong>Note: any <code>HTML</code> elements added within <code>foreignObject</code> must posses an <code>xmlns=\"http://www.w3.org/1999/xhtml\"</code> attribute.</strong></p>\n\n<h3>\n  <a name=\"the-contenteditable-attribute\" href=\"#the-contenteditable-attribute\" class=\"anchor\">\n  </a>\n  The contenteditable attribute\n</h3>\n\n<p>The last thing to check out here is the <code>contenteditable</code> attribute added to our <code>h1</code> and <code>h2</code> tags:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;h1</span>\n  <span class=\"na\">xmlns=</span><span class=\"s\">\"http://www.w3.org/1999/xhtml\"</span>\n  <span class=\"na\">class=</span><span class=\"s\">\"social-image__title\"</span>\n  <span class=\"na\">contenteditable</span>\n<span class=\"nt\">&gt;</span>\n  All of this text is editable... click on it and start typing!\n<span class=\"nt\">&lt;/h1&gt;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable\">contenteditable</a> simply allows the user to edit the text within <code>HTML</code> tags. This is perfect for us, as it means users will easily be able to add their own content and instantly preview the result.</p>\n\n\n<hr>\n\n<h2>\n  <a name=\"style-time\" href=\"#style-time\" class=\"anchor\">\n  </a>\n  Style time 💅\n</h2>\n\n<p>OK, so, we now have all the markup we need to create beautiful social images. Things are probably looking a little bit sad though. We should really fix that. </p>\n\n<h3>\n  <a name=\"page-styles\" href=\"#page-styles\" class=\"anchor\">\n  </a>\n  Page styles\n</h3>\n\n<p>First up, let's add some styles for our UI:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight css\"><code><span class=\"o\">*</span> <span class=\"p\">{</span>\n  <span class=\"nl\">margin</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"nl\">box-sizing</span><span class=\"p\">:</span> <span class=\"n\">border-box</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nd\">:root</span> <span class=\"p\">{</span>\n  <span class=\"py\">--black</span><span class=\"p\">:</span> <span class=\"n\">hsl</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"m\">0%</span><span class=\"p\">,</span> <span class=\"m\">10%</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">body</span> <span class=\"p\">{</span>\n  <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100vw</span><span class=\"p\">;</span>\n  <span class=\"nl\">min-height</span><span class=\"p\">:</span> <span class=\"m\">100vh</span><span class=\"p\">;</span>\n  <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">grid</span><span class=\"p\">;</span>\n  <span class=\"py\">place-items</span><span class=\"p\">:</span> <span class=\"nb\">center</span><span class=\"p\">;</span>\n  <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">2rem</span><span class=\"p\">;</span>\n  <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"n\">-apple-system</span><span class=\"p\">,</span> <span class=\"n\">BlinkMacSystemFont</span><span class=\"p\">,</span> <span class=\"s1\">\"Segoe UI\"</span><span class=\"p\">,</span> <span class=\"n\">Roboto</span><span class=\"p\">,</span> <span class=\"n\">Helvetica</span><span class=\"p\">,</span>\n    <span class=\"n\">Arial</span><span class=\"p\">,</span> <span class=\"nb\">sans-serif</span><span class=\"p\">,</span> <span class=\"s1\">\"Apple Color Emoji\"</span><span class=\"p\">,</span> <span class=\"s1\">\"Segoe UI Emoji\"</span><span class=\"p\">,</span> <span class=\"s1\">\"Segoe UI Symbol\"</span><span class=\"p\">;</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--black</span><span class=\"p\">);</span>\n  <span class=\"nl\">line-height</span><span class=\"p\">:</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n  <span class=\"nl\">-webkit-font-smoothing</span><span class=\"p\">:</span> <span class=\"n\">antialiased</span><span class=\"p\">;</span>\n  <span class=\"nl\">-moz-osx-font-smoothing</span><span class=\"p\">:</span> <span class=\"n\">grayscale</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.wrapper</span> <span class=\"p\">{</span>\n  <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span>\n  <span class=\"nl\">max-width</span><span class=\"p\">:</span> <span class=\"m\">60rem</span><span class=\"p\">;</span>\n  <span class=\"nl\">min-width</span><span class=\"p\">:</span> <span class=\"m\">20rem</span><span class=\"p\">;</span>\n  <span class=\"nl\">margin</span><span class=\"p\">:</span> <span class=\"m\">0</span> <span class=\"nb\">auto</span><span class=\"p\">;</span>\n  <span class=\"nl\">overflow</span><span class=\"p\">:</span> <span class=\"nb\">hidden</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.controls</span> <span class=\"p\">{</span>\n  <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">flex</span><span class=\"p\">;</span>\n  <span class=\"nl\">align-items</span><span class=\"p\">:</span> <span class=\"nb\">center</span><span class=\"p\">;</span>\n  <span class=\"nl\">flex-wrap</span><span class=\"p\">:</span> <span class=\"n\">wrap</span><span class=\"p\">;</span>\n  <span class=\"nl\">margin</span><span class=\"p\">:</span> <span class=\"m\">2rem</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.controls__label</span> <span class=\"p\">{</span>\n  <span class=\"nl\">margin-right</span><span class=\"p\">:</span> <span class=\"m\">1rem</span><span class=\"p\">;</span>\n  <span class=\"nl\">font-weight</span><span class=\"p\">:</span> <span class=\"m\">500</span><span class=\"p\">;</span>\n  <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1rem</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.controls__randomize</span> <span class=\"p\">{</span>\n  <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">flex</span><span class=\"p\">;</span>\n  <span class=\"nl\">justify-content</span><span class=\"p\">:</span> <span class=\"n\">flex-start</span><span class=\"p\">;</span>\n  <span class=\"nl\">align-items</span><span class=\"p\">:</span> <span class=\"nb\">center</span><span class=\"p\">;</span>\n  <span class=\"nl\">flex-wrap</span><span class=\"p\">:</span> <span class=\"n\">wrap</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.controls__btn</span> <span class=\"p\">{</span>\n  <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">8rem</span><span class=\"p\">;</span>\n  <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">2.25rem</span><span class=\"p\">;</span>\n  <span class=\"nl\">margin-right</span><span class=\"p\">:</span> <span class=\"m\">1rem</span><span class=\"p\">;</span>\n  <span class=\"nl\">background</span><span class=\"p\">:</span> <span class=\"m\">#fff</span><span class=\"p\">;</span>\n  <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n  <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">2px</span> <span class=\"nb\">solid</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--black</span><span class=\"p\">);</span>\n  <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"nb\">inherit</span><span class=\"p\">;</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--black</span><span class=\"p\">);</span>\n  <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1rem</span><span class=\"p\">;</span>\n  <span class=\"nl\">font-weight</span><span class=\"p\">:</span> <span class=\"m\">500</span><span class=\"p\">;</span>\n  <span class=\"nl\">cursor</span><span class=\"p\">:</span> <span class=\"nb\">pointer</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.controls__btn</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n  <span class=\"nl\">background</span><span class=\"p\">:</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--black</span><span class=\"p\">);</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"m\">#fff</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.controls__btn--save</span> <span class=\"p\">{</span>\n  <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">relative</span><span class=\"p\">;</span>\n  <span class=\"nl\">margin-left</span><span class=\"p\">:</span> <span class=\"nb\">auto</span><span class=\"p\">;</span>\n  <span class=\"nl\">margin-right</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"nl\">background</span><span class=\"p\">:</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--black</span><span class=\"p\">);</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"m\">#fff</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.controls__btn--save</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n  <span class=\"nl\">background</span><span class=\"p\">:</span> <span class=\"m\">#fff</span><span class=\"p\">;</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--black</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.controls__saving-disabled</span> <span class=\"p\">{</span>\n  <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">0.875rem</span><span class=\"p\">;</span>\n  <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">2rem</span><span class=\"p\">;</span>\n  <span class=\"nl\">font-weight</span><span class=\"p\">:</span> <span class=\"m\">500</span><span class=\"p\">;</span>\n  <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n  <span class=\"nl\">font-style</span><span class=\"p\">:</span> <span class=\"nb\">italic</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">@media</span> <span class=\"n\">only</span> <span class=\"n\">screen</span> <span class=\"n\">and</span> <span class=\"p\">(</span><span class=\"n\">max-width</span><span class=\"p\">:</span> <span class=\"m\">800px</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nt\">body</span> <span class=\"p\">{</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">0.75rem</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nc\">.controls__btn</span> <span class=\"p\">{</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">6rem</span><span class=\"p\">;</span>\n    <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">2rem</span><span class=\"p\">;</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">0.875rem</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">0.75rem</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nc\">.controls__label</span> <span class=\"p\">{</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">0.875rem</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-right</span><span class=\"p\">:</span> <span class=\"m\">0.5rem</span><span class=\"p\">;</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nc\">.controls__btn--save</span> <span class=\"p\">{</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">1.25rem</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">@media</span> <span class=\"n\">only</span> <span class=\"n\">screen</span> <span class=\"n\">and</span> <span class=\"p\">(</span><span class=\"n\">max-width</span><span class=\"p\">:</span> <span class=\"m\">480px</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nc\">.controls__btn</span> <span class=\"p\">{</span>\n    <span class=\"nl\">margin-right</span><span class=\"p\">:</span> <span class=\"m\">0.5rem</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>I won't go too deep on this CSS, as it's not the main feature here. If you do have any questions about these styles, though, do feel free to drop me a message.</p>\n\n<h3>\n  <a name=\"social-image-styles\" href=\"#social-image-styles\" class=\"anchor\">\n  </a>\n  Social image styles\n</h3>\n\n<p>Next, let's add an internal <code>&lt;style&gt;</code> tag to our <code>&lt;svg&gt;</code> element. This will contain all the styles for the social image itself:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;svg</span>\n  <span class=\"na\">viewBox=</span><span class=\"s\">\"0 0 1200 630\"</span>\n  <span class=\"na\">xmlns=</span><span class=\"s\">\"http://www.w3.org/2000/svg\"</span>\n  <span class=\"na\">class=</span><span class=\"s\">\"social-image\"</span>\n<span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;style&gt;</span>\n    <span class=\"o\">*</span> <span class=\"p\">{</span>\n      <span class=\"nl\">margin</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n      <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n      <span class=\"nl\">box-sizing</span><span class=\"p\">:</span> <span class=\"n\">border-box</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nc\">.social-image</span> <span class=\"p\">{</span>\n      <span class=\"py\">--align-text-x</span><span class=\"p\">:</span> <span class=\"n\">flex-start</span><span class=\"p\">;</span>\n      <span class=\"py\">--align-text-y</span><span class=\"p\">:</span> <span class=\"n\">flex-end</span><span class=\"p\">;</span>\n\n      <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span>\n      <span class=\"nl\">background</span><span class=\"p\">:</span> <span class=\"m\">#f5f7fa</span><span class=\"p\">;</span>\n      <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"n\">-apple-system</span><span class=\"p\">,</span> <span class=\"n\">BlinkMacSystemFont</span><span class=\"p\">,</span> <span class=\"s1\">\"Segoe UI\"</span><span class=\"p\">,</span> <span class=\"n\">Roboto</span><span class=\"p\">,</span>\n        <span class=\"n\">Helvetica</span><span class=\"p\">,</span> <span class=\"n\">Arial</span><span class=\"p\">,</span> <span class=\"nb\">sans-serif</span><span class=\"p\">,</span> <span class=\"s1\">\"Apple Color Emoji\"</span><span class=\"p\">,</span> <span class=\"s1\">\"Segoe UI Emoji\"</span><span class=\"p\">,</span>\n        <span class=\"s1\">\"Segoe UI Symbol\"</span><span class=\"p\">;</span>\n      <span class=\"nl\">line-height</span><span class=\"p\">:</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nc\">.social-image__html</span> <span class=\"p\">{</span>\n      <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">flex</span><span class=\"p\">;</span>\n      <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span>\n      <span class=\"nl\">justify-content</span><span class=\"p\">:</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--align-text-x</span><span class=\"p\">);</span>\n      <span class=\"nl\">align-items</span><span class=\"p\">:</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--align-text-y</span><span class=\"p\">);</span>\n      <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">72px</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nc\">.social-image__text</span> <span class=\"p\">{</span>\n      <span class=\"nl\">max-width</span><span class=\"p\">:</span> <span class=\"m\">700px</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nc\">.social-image__title</span> <span class=\"p\">{</span>\n      <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">56px</span><span class=\"p\">;</span>\n      <span class=\"nl\">line-height</span><span class=\"p\">:</span> <span class=\"m\">68px</span><span class=\"p\">;</span>\n      <span class=\"nl\">font-weight</span><span class=\"p\">:</span> <span class=\"m\">800</span><span class=\"p\">;</span>\n      <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">24px</span><span class=\"p\">;</span>\n      <span class=\"nl\">letter-spacing</span><span class=\"p\">:</span> <span class=\"m\">-0.0125em</span><span class=\"p\">;</span>\n      <span class=\"nl\">outline</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nc\">.social-image__meta</span> <span class=\"p\">{</span>\n      <span class=\"nl\">font-weight</span><span class=\"p\">:</span> <span class=\"m\">500</span><span class=\"p\">;</span>\n      <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">24px</span><span class=\"p\">;</span>\n      <span class=\"nl\">line-height</span><span class=\"p\">:</span> <span class=\"m\">36px</span><span class=\"p\">;</span>\n      <span class=\"nl\">outline</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n      <span class=\"nl\">letter-spacing</span><span class=\"p\">:</span> <span class=\"m\">-0.0125em</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"nt\">&lt;/style&gt;</span>\n  ...\n<span class=\"nt\">&lt;/svg&gt;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We are adding this CSS to an internal <code>&lt;style&gt;</code> tag as I had some issues with <code>html2canvas</code> not rendering as expected with the styles living outside of the <code>&lt;svg&gt;</code>. It's also nice to keep things contained.</p>\n\n<p>Again, I won't go into too much detail with the CSS here, but the key effects of this stylesheet are: </p>\n\n<ul>\n<li><p>Set up some <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/--*\">CSS Custom Properties</a> to handle the positioning of our text within the social image, in combination with <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/flex\">flexbox</a>. We can modify these custom properties later using JavaScript. </p></li>\n<li><p>Add some typographic style to the text content. We are using <em>system fonts</em> here. It is possible to use custom fonts, but doing so adds a little complexity as the fonts need to be embedded within the <code>&lt;svg&gt;</code>. Maybe next time!</p></li>\n</ul>\n\n<h3>\n  <a name=\"our-progress-so-far\" href=\"#our-progress-so-far\" class=\"anchor\">\n  </a>\n  Our progress so far\n</h3>\n\n<p>Now that both of these stylesheets have been added in their respective positions, you should hopefully be seeing something like this in your browser: </p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--j_g3xcrG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fpfnldjdn4qcaxo3xh3o.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--j_g3xcrG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fpfnldjdn4qcaxo3xh3o.gif\" alt=\"A simple social image design being resized\" loading=\"lazy\"></a></p>\n\n<p>Pretty cool eh! As you resize your browser, check out how our HTML magically scales along with our <code>&lt;svg&gt;</code> element ✨</p>\n\n<p>At this point, we are all set up and ready to make things beautiful. Let's head over to JS-town and make that happen 🎨</p>\n\n\n<hr>\n\n<h2>\n  <a name=\"next-stop-javascript-central\" href=\"#next-stop-javascript-central\" class=\"anchor\">\n  </a>\n  Next stop, JavaScript central 🚂\n</h2>\n\n<h3>\n  <a name=\"package-installation\" href=\"#package-installation\" class=\"anchor\">\n  </a>\n  Package installation\n</h3>\n\n<p>Let's get the boring stuff out of the way first and install the packages we need for this project. The packages we will be using are: </p>\n\n<ul>\n<li>\n<a href=\"https://www.npmjs.com/package/svgjs\">svg.js</a> - Used to simplify SVG scripting (creating and updating SVG elements such as <code>&lt;circle&gt;</code>)</li>\n<li>\n<a href=\"https://www.npmjs.com/package/html2canvas\">html2canvas</a> - Used to take a screenshot of our <code>&lt;svg&gt;</code> social image so that it can be downloaded</li>\n<li>\n<a href=\"https://www.npmjs.com/package/file-saver\">file-saver</a> - Used to handle the saving of our social image once it has been captured by <code>html2canvas</code>\n</li>\n<li>\n<a href=\"https://www.npmjs.com/package/resize-observer-polyfill\">resize-observer-polyfill</a> - Adds a polyfill for <code>ResizeObserver</code> to browsers that do not support it</li>\n</ul>\n\n<p>If you are following along on CodePen, you can simply add these imports to your JS file:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">SVG</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">https://cdn.skypack.dev/@svgdotjs/svg.js</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">html2canvas</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">https://cdn.skypack.dev/html2canvas@1.0.0-rc.7</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">ResizeObserver</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">https://cdn.skypack.dev/resize-observer-polyfill@1.5.1</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">FileSaver</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">https://cdn.skypack.dev/file-saver@2.0.5</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>If you are working in your own environment, you can install the packages you need with:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>npm i svgjs html2canvas resize-observer-polyfill file-saver \n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The packages can then be imported like so:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">SVG</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">svg.js</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">html2canvas</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">html2canvas</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">ResizeObserver</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">resize-observer-polyfill</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">FileSaver</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">file-saver</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><strong>Note: If you are working in your own environment, you will need a bundler such as Webpack or Parcel to handle these imports.</strong></p>\n\n<h3>\n  <a name=\"dom-element-references\" href=\"#dom-element-references\" class=\"anchor\">\n  </a>\n  DOM Element references\n</h3>\n\n<p>Now that we have all the packages we need for this project, we should add some variables that reference our various DOM elements <strong>(buttons, the social image svg, etc)</strong> </p>\n\n<p>To do so we can add:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">socialImageSVG</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">.social-image</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">socialImageTitle</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">.social-image__title</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">socialImageMeta</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">.social-image__meta</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">saveBtn</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">.controls__btn--save</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">alignmentBtn</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">.controls__btn--alignment</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">colorBtn</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">.controls__btn--colors</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">shapesBtn</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">.controls__btn--shapes</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"colors\" href=\"#colors\" class=\"anchor\">\n  </a>\n  Colors\n</h3>\n\n<p>Next up on the list is defining some color variables. These will store a bunch of HSL colors that we will define a little later and eventually use to color our social image:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">baseColor</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">baseColorWhite</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">baseColorBlack</span><span class=\"p\">;</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">complimentaryColor1</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">complimentaryColor2</span><span class=\"p\">;</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">shapeColors</span><span class=\"p\">;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Nice. All our colors are empty right now, but that's fine.</p>\n\n<h3>\n  <a name=\"alignment-options\" href=\"#alignment-options\" class=\"anchor\">\n  </a>\n  Alignment options\n</h3>\n\n<p>In addition to random colors, our social image will also allow random alignment of its text. To facilitate this a little further down the track, let's store the <code>flex</code> properties we want to use to control alignment in an array:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">alignmentOpts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">flex-start</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">flex-end</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">center</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Lovely. We will use these values shortly. </p>\n\n<h3>\n  <a name=\"set-up-an-svgjs-instance\" href=\"#set-up-an-svgjs-instance\" class=\"anchor\">\n  </a>\n  Set up an svg.js instance\n</h3>\n\n<p>We are going to use <a href=\"https://svgjs.com/docs/3.0/\">svg.js</a> here to allow for quick, easy SVG scripting. Without svg.js, creating and updating SVG elements can get <strong>very</strong> wordy.</p>\n\n<p>We can create a new svg.js instance like so:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">shapes</span> <span class=\"o\">=</span> <span class=\"nx\">SVG</span><span class=\"p\">(</span><span class=\"nx\">socialImageSVG</span><span class=\"p\">).</span><span class=\"nx\">group</span><span class=\"p\">();</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>What this line is saying is - Create me a new SVG <code>&lt;group&gt;</code> element, inside our root <code>&lt;svg&gt;</code> that I can easily draw into with methods such as <code>shapes.rect(...)</code>.</p>\n\n<h3>\n  <a name=\"adding-the-raw-random-endraw-utility-function\" href=\"#adding-the-raw-random-endraw-utility-function\" class=\"anchor\">\n  </a>\n  Adding the <code>random()</code> utility function\n</h3>\n\n<p>Before we go any further, lets quickly add a small utility function <code>random</code>, which generates a random number within a range:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">random</span><span class=\"p\">(</span><span class=\"nx\">min</span><span class=\"p\">,</span> <span class=\"nx\">max</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">random</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nx\">max</span> <span class=\"o\">-</span> <span class=\"nx\">min</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nx\">min</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>This is a super handy utility. Definitely save it for later if you fancy trying your hand at some more generative stuff! I use it all the time. </p>\n\n<h3>\n  <a name=\"choose-some-random-colors\" href=\"#choose-some-random-colors\" class=\"anchor\">\n  </a>\n  Choose some random colors\n</h3>\n\n<p>Often in my tutorials, I hold the colors until right at the end, but I think for this one we should define them early. They are such an integral part of the end result and having them set will make following the code in the upcoming steps a  bit easier. </p>\n\n<p>To generate some random colors, we can add the following <code>setColors</code> function:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">setColors</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">baseHue</span> <span class=\"o\">=</span> <span class=\"nx\">random</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">saturation</span> <span class=\"o\">=</span> <span class=\"nx\">random</span><span class=\"p\">(</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">baseColor</span> <span class=\"o\">=</span> <span class=\"s2\">`hsl(</span><span class=\"p\">${</span><span class=\"nx\">baseHue</span><span class=\"p\">}</span><span class=\"s2\">, </span><span class=\"p\">${</span><span class=\"nx\">saturation</span><span class=\"p\">}</span><span class=\"s2\">%, 60%)`</span><span class=\"p\">;</span>\n  <span class=\"nx\">baseColorWhite</span> <span class=\"o\">=</span> <span class=\"s2\">`hsl(</span><span class=\"p\">${</span><span class=\"nx\">baseHue</span><span class=\"p\">}</span><span class=\"s2\">, </span><span class=\"p\">${</span><span class=\"nx\">saturation</span><span class=\"p\">}</span><span class=\"s2\">%, 97%)`</span><span class=\"p\">;</span>\n  <span class=\"nx\">baseColorBlack</span> <span class=\"o\">=</span> <span class=\"s2\">`hsl(</span><span class=\"p\">${</span><span class=\"nx\">baseHue</span><span class=\"p\">}</span><span class=\"s2\">, 95%, 3%)`</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">complimentaryColor1</span> <span class=\"o\">=</span> <span class=\"s2\">`hsl(</span><span class=\"p\">${</span><span class=\"nx\">baseHue</span> <span class=\"o\">+</span> <span class=\"mi\">90</span><span class=\"p\">}</span><span class=\"s2\">, </span><span class=\"p\">${</span><span class=\"nx\">saturation</span><span class=\"p\">}</span><span class=\"s2\">%, 60%)`</span><span class=\"p\">;</span>\n  <span class=\"nx\">complimentaryColor2</span> <span class=\"o\">=</span> <span class=\"s2\">`hsl(</span><span class=\"p\">${</span><span class=\"nx\">baseHue</span> <span class=\"o\">+</span> <span class=\"mi\">180</span><span class=\"p\">}</span><span class=\"s2\">, </span><span class=\"p\">${</span><span class=\"nx\">saturation</span><span class=\"p\">}</span><span class=\"s2\">%, 60%)`</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">shapeColors</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nx\">complimentaryColor1</span><span class=\"p\">,</span> <span class=\"nx\">complimentaryColor2</span><span class=\"p\">,</span> <span class=\"nx\">baseColor</span><span class=\"p\">];</span>\n\n  <span class=\"nx\">socialImageSVG</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">background</span> <span class=\"o\">=</span> <span class=\"nx\">baseColorWhite</span><span class=\"p\">;</span>\n  <span class=\"nx\">socialImageSVG</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">color</span> <span class=\"o\">=</span> <span class=\"nx\">baseColorBlack</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Here's what this function is doing: </p>\n\n<ol>\n<li>Pick a random hue, somewhere between 0 and 360</li>\n<li>Pick a random saturation, somewhere between 60 and 90</li>\n<li>Define a base color, a very dark color, and a very light color all based on the same hue. This is a great way to create simple color palettes and keep things consistent </li>\n<li>Choose two complementary colors, each with a hue 90 degrees away from the previous, with the same saturation and lightness. This is another great, simple way of finding colors that work together</li>\n<li>Store the complimentary and base colors in our <code>shapeColors</code> array. We will use these later to fill in our shapes </li>\n<li>Set the background of our social image to the very light color, and it's text color to the very dark color</li>\n</ol>\n\n<p>Now if we call <code>setColors()</code>, we should see the background and text colors of our social image change. It will be very subtle. Hopefully, something like this: </p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--JQY275x7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pz3wn8cp7lc1diqwfysg.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--JQY275x7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pz3wn8cp7lc1diqwfysg.png\" alt=\"A colorful social image\" loading=\"lazy\"></a></p>\n\n<p>Looking good. Onwards!</p>\n\n<h3>\n  <a name=\"creating-random-shape-positions\" href=\"#creating-random-shape-positions\" class=\"anchor\">\n  </a>\n  Creating random shape positions\n</h3>\n\n<p>Next on our list is to generate some random, non-overlapping rectangles to position our shapes within. We want these rectangles to not only avoid overlapping each other but also avoid overlapping our text.</p>\n\n<h4>\n  <a name=\"a-small-problem\" href=\"#a-small-problem\" class=\"anchor\">\n  </a>\n  A small problem\n</h4>\n\n<p>To avoid overlapping our text when creating random rectangles, we need to know each text element's dimensions <strong>relative</strong> to our <code>&lt;svg&gt;</code>'s <code>viewBox</code>. </p>\n\n<p>Often for this purpose we would use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement/getBBox\">getBBox</a> however <code>getBBox</code> is only available for SVG elements, and our text is HTML. </p>\n\n<p>This isn't so bad, we can create our own <code>relativeBounds</code> function that will solve this for us in no time!</p>\n\n<p>Here it is:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">relativeBounds</span><span class=\"p\">(</span><span class=\"nx\">svg</span><span class=\"p\">,</span> <span class=\"nx\">HTMLElement</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">,</span> <span class=\"nx\">width</span><span class=\"p\">,</span> <span class=\"nx\">height</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">HTMLElement</span><span class=\"p\">.</span><span class=\"nx\">getBoundingClientRect</span><span class=\"p\">();</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">startPoint</span> <span class=\"o\">=</span> <span class=\"nx\">svg</span><span class=\"p\">.</span><span class=\"nx\">createSVGPoint</span><span class=\"p\">();</span>\n  <span class=\"nx\">startPoint</span><span class=\"p\">.</span><span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"nx\">x</span><span class=\"p\">;</span>\n  <span class=\"nx\">startPoint</span><span class=\"p\">.</span><span class=\"nx\">y</span> <span class=\"o\">=</span> <span class=\"nx\">y</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">endPoint</span> <span class=\"o\">=</span> <span class=\"nx\">svg</span><span class=\"p\">.</span><span class=\"nx\">createSVGPoint</span><span class=\"p\">();</span>\n  <span class=\"nx\">endPoint</span><span class=\"p\">.</span><span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"nx\">x</span> <span class=\"o\">+</span> <span class=\"nx\">width</span><span class=\"p\">;</span>\n  <span class=\"nx\">endPoint</span><span class=\"p\">.</span><span class=\"nx\">y</span> <span class=\"o\">=</span> <span class=\"nx\">y</span> <span class=\"o\">+</span> <span class=\"nx\">height</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">startPointTransformed</span> <span class=\"o\">=</span> <span class=\"nx\">startPoint</span><span class=\"p\">.</span><span class=\"nx\">matrixTransform</span><span class=\"p\">(</span>\n    <span class=\"nx\">svg</span><span class=\"p\">.</span><span class=\"nx\">getScreenCTM</span><span class=\"p\">().</span><span class=\"nx\">inverse</span><span class=\"p\">()</span>\n  <span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">endPointTransformed</span> <span class=\"o\">=</span> <span class=\"nx\">endPoint</span><span class=\"p\">.</span><span class=\"nx\">matrixTransform</span><span class=\"p\">(</span>\n    <span class=\"nx\">svg</span><span class=\"p\">.</span><span class=\"nx\">getScreenCTM</span><span class=\"p\">().</span><span class=\"nx\">inverse</span><span class=\"p\">()</span>\n  <span class=\"p\">);</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"na\">x</span><span class=\"p\">:</span> <span class=\"nx\">startPointTransformed</span><span class=\"p\">.</span><span class=\"nx\">x</span><span class=\"p\">,</span>\n    <span class=\"na\">y</span><span class=\"p\">:</span> <span class=\"nx\">startPointTransformed</span><span class=\"p\">.</span><span class=\"nx\">y</span><span class=\"p\">,</span>\n    <span class=\"na\">width</span><span class=\"p\">:</span> <span class=\"nx\">endPointTransformed</span><span class=\"p\">.</span><span class=\"nx\">x</span> <span class=\"o\">-</span> <span class=\"nx\">startPointTransformed</span><span class=\"p\">.</span><span class=\"nx\">x</span><span class=\"p\">,</span>\n    <span class=\"na\">height</span><span class=\"p\">:</span> <span class=\"nx\">endPointTransformed</span><span class=\"p\">.</span><span class=\"nx\">y</span> <span class=\"o\">-</span> <span class=\"nx\">startPointTransformed</span><span class=\"p\">.</span><span class=\"nx\">y</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Cool! I won't go too deep on this function as I appreciate it is rather dry, but it essentially gives us <code>getBBox</code> functionality for HTML elements within an SVG.</p>\n\n<p>Now that we have our <code>relativeBounds</code> function, we can generate our shape positions. </p>\n\n<p>Lets add a <code>generateRandomRects</code> and a <code>detectRectCollision</code> function:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">generateRandomRects</span><span class=\"p\">(</span><span class=\"nx\">existing</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">rects</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">existing</span><span class=\"p\">];</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">tries</span> <span class=\"o\">=</span> <span class=\"mi\">250</span><span class=\"p\">;</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">maxShapes</span> <span class=\"o\">=</span> <span class=\"mi\">6</span><span class=\"p\">;</span>\n\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">tries</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">rects</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"nx\">maxShapes</span> <span class=\"o\">+</span> <span class=\"nx\">existing</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"k\">break</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">size</span> <span class=\"o\">=</span> <span class=\"nx\">random</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">);</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">rect</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"na\">x</span><span class=\"p\">:</span> <span class=\"nx\">random</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"nx\">size</span><span class=\"p\">,</span> <span class=\"mi\">1200</span><span class=\"p\">),</span>\n      <span class=\"na\">y</span><span class=\"p\">:</span> <span class=\"nx\">random</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"nx\">size</span><span class=\"p\">,</span> <span class=\"mi\">630</span><span class=\"p\">),</span>\n      <span class=\"na\">width</span><span class=\"p\">:</span> <span class=\"nx\">size</span><span class=\"p\">,</span>\n      <span class=\"na\">height</span><span class=\"p\">:</span> <span class=\"nx\">size</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">rects</span><span class=\"p\">.</span><span class=\"nx\">some</span><span class=\"p\">((</span><span class=\"nx\">r</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">detectRectCollision</span><span class=\"p\">(</span><span class=\"nx\">r</span><span class=\"p\">,</span> <span class=\"nx\">rect</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n      <span class=\"nx\">rects</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">rect</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"nx\">rects</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">detectRectCollision</span><span class=\"p\">(</span><span class=\"nx\">rect1</span><span class=\"p\">,</span> <span class=\"nx\">rect2</span><span class=\"p\">,</span> <span class=\"nx\">padding</span> <span class=\"o\">=</span> <span class=\"mi\">32</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"nx\">rect1</span><span class=\"p\">.</span><span class=\"nx\">x</span> <span class=\"o\">&lt;</span> <span class=\"nx\">rect2</span><span class=\"p\">.</span><span class=\"nx\">x</span> <span class=\"o\">+</span> <span class=\"nx\">rect2</span><span class=\"p\">.</span><span class=\"nx\">width</span> <span class=\"o\">+</span> <span class=\"nx\">padding</span> <span class=\"o\">&amp;&amp;</span>\n    <span class=\"nx\">rect1</span><span class=\"p\">.</span><span class=\"nx\">x</span> <span class=\"o\">+</span> <span class=\"nx\">rect1</span><span class=\"p\">.</span><span class=\"nx\">width</span> <span class=\"o\">+</span> <span class=\"nx\">padding</span> <span class=\"o\">&gt;</span> <span class=\"nx\">rect2</span><span class=\"p\">.</span><span class=\"nx\">x</span> <span class=\"o\">&amp;&amp;</span>\n    <span class=\"nx\">rect1</span><span class=\"p\">.</span><span class=\"nx\">y</span> <span class=\"o\">&lt;</span> <span class=\"nx\">rect2</span><span class=\"p\">.</span><span class=\"nx\">y</span> <span class=\"o\">+</span> <span class=\"nx\">rect2</span><span class=\"p\">.</span><span class=\"nx\">height</span> <span class=\"o\">+</span> <span class=\"nx\">padding</span> <span class=\"o\">&amp;&amp;</span>\n    <span class=\"nx\">rect1</span><span class=\"p\">.</span><span class=\"nx\">y</span> <span class=\"o\">+</span> <span class=\"nx\">rect1</span><span class=\"p\">.</span><span class=\"nx\">height</span> <span class=\"o\">+</span> <span class=\"nx\">padding</span> <span class=\"o\">&gt;</span> <span class=\"nx\">rect2</span><span class=\"p\">.</span><span class=\"nx\">y</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>To break this down: </p>\n\n<ol>\n<li>Store some existing rectangles in an array (in our case, the surrounding rectangles, or bounds, of our text elements) </li>\n<li>For a certain amount of tries: create a randomly sized rectangle. If this new rectangle does not overlap with any of the other rectangles, store it.</li>\n<li>Once all of the tries are used up, or the maximum number of shapes reached, return the random rectangles that we managed to generate</li>\n</ol>\n\n<p>You may notice a funny looking <code>padding</code> option in our rectangle collision code. This defines the minimum distance between rectangles. I found it helped make things look a little neater. </p>\n\n<h4>\n  <a name=\"a-note-on-imperfection\" href=\"#a-note-on-imperfection\" class=\"anchor\">\n  </a>\n  A note on imperfection\n</h4>\n\n<p>This is far from a perfect function. It is rather slow as a result of using brute force to place our rectangles, and there is no guarantee <code>maxShapes</code> will be reached with our number of tries. </p>\n\n<p>Does that mean it's bad, though? No way. </p>\n\n<p>We are worried more about visual results than algorithmic efficiency right now, and these values seem to produce pretty <em>aesthetic</em> looking results. <strong>The real challenge of generative design lies the tweaking of values like this.</strong></p>\n\n<p>You should experiment with changing these parameters. Try changing the maximum number of shapes, maybe tweak the size of our the or increase the maximum number of tries. Check out the results. Repeat. There are no right answers here! </p>\n\n<h3>\n  <a name=\"drawing-our-shapes\" href=\"#drawing-our-shapes\" class=\"anchor\">\n  </a>\n  Drawing our shapes\n</h3>\n\n<p>Alright, so we have some code ready to generate the non-overlapping rectangles. Let's bring them to life! </p>\n\n<p>First, let's add a new <code>generate</code> function:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">generate</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">shapes</span><span class=\"p\">.</span><span class=\"nx\">clear</span><span class=\"p\">();</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">htmlRects</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"nx\">relativeBounds</span><span class=\"p\">(</span><span class=\"nx\">socialImageSVG</span><span class=\"p\">,</span> <span class=\"nx\">socialImageTitle</span><span class=\"p\">),</span>\n    <span class=\"nx\">relativeBounds</span><span class=\"p\">(</span><span class=\"nx\">socialImageSVG</span><span class=\"p\">,</span> <span class=\"nx\">socialImageMeta</span><span class=\"p\">)</span>\n  <span class=\"p\">];</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">rects</span> <span class=\"o\">=</span> <span class=\"nx\">generateRandomRects</span><span class=\"p\">(</span><span class=\"nx\">htmlRects</span><span class=\"p\">);</span>\n\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">rect</span> <span class=\"k\">of</span> <span class=\"nx\">rects</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nx\">rects</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"nx\">drawRandomShape</span><span class=\"p\">(</span><span class=\"nx\">rect</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>This is actually quite a small block of code. <code>generateRandomRects</code> is doing most of the heavy lifting here. We are saying: </p>\n\n<ol>\n<li>Clear out any shapes that already exist (this will be useful later when dynamically re-generating the image)</li>\n<li>Store the bounds of our two text elements, relative to the <code>viewBox</code>, in an array</li>\n<li>Generate a bunch of random, non-overlapping rectangles</li>\n<li>For every random rectangle (apart from the first two text rectangles) draw a random shape <strong>within</strong> it.</li>\n</ol>\n\n<p>Now, we don't actually have a <code>drawRandomShape</code> function right now. Let's add one. As a simple start, try this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">drawRandomShape</span><span class=\"p\">(</span><span class=\"nx\">rect</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">,</span> <span class=\"nx\">width</span><span class=\"p\">,</span> <span class=\"nx\">height</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">rect</span><span class=\"p\">;</span>\n  <span class=\"nx\">shapes</span><span class=\"p\">.</span><span class=\"nx\">rect</span><span class=\"p\">(</span><span class=\"nx\">width</span><span class=\"p\">,</span> <span class=\"nx\">height</span><span class=\"p\">).</span><span class=\"nx\">x</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">).</span><span class=\"nx\">y</span><span class=\"p\">(</span><span class=\"nx\">y</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Once you have added <code>drawRandomShape</code>, you can safely call <code>generate</code> without your browser getting mad at you:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">generate</span><span class=\"p\">();</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>If you check out the browser now, you should see something like this: </p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--EZZY8vx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vnock9439moo7n3l8jdt.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--EZZY8vx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vnock9439moo7n3l8jdt.png\" alt=\"Social image with random rectangles\" loading=\"lazy\"></a></p>\n\n<p>Pretty nice! These are the random rectangles we generated earlier, presented in a very simple way. </p>\n\n<p>We can expand, though. Let's update<code>drawRandomShape</code> and add a small <code>randomColor</code> utility function:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">randomColor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ~~ === shorthand for Math.floor()</span>\n  <span class=\"k\">return</span> <span class=\"nx\">shapeColors</span><span class=\"p\">[</span><span class=\"o\">~~</span><span class=\"nx\">random</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">shapeColors</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">drawRandomShape</span><span class=\"p\">({</span> <span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">,</span> <span class=\"nx\">width</span><span class=\"p\">,</span> <span class=\"nx\">height</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">shapeChoices</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">rect</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">ellipse</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">triangle</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">shape</span><span class=\"p\">;</span>\n\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">shapeChoices</span><span class=\"p\">[</span><span class=\"o\">~~</span><span class=\"nx\">random</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">shapeChoices</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)])</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">ellipse</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n      <span class=\"nx\">shape</span> <span class=\"o\">=</span> <span class=\"nx\">shapes</span><span class=\"p\">.</span><span class=\"nx\">ellipse</span><span class=\"p\">(</span><span class=\"nx\">width</span><span class=\"p\">,</span> <span class=\"nx\">height</span><span class=\"p\">).</span><span class=\"nx\">x</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">).</span><span class=\"nx\">y</span><span class=\"p\">(</span><span class=\"nx\">y</span><span class=\"p\">);</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">triangle</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n      <span class=\"nx\">shape</span> <span class=\"o\">=</span> <span class=\"nx\">shapes</span>\n        <span class=\"p\">.</span><span class=\"nx\">polygon</span><span class=\"p\">(</span><span class=\"s2\">`0 </span><span class=\"p\">${</span><span class=\"nx\">height</span><span class=\"p\">}</span><span class=\"s2\">, </span><span class=\"p\">${</span><span class=\"nx\">width</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">}</span><span class=\"s2\"> 0, </span><span class=\"p\">${</span><span class=\"nx\">width</span><span class=\"p\">}</span><span class=\"s2\"> </span><span class=\"p\">${</span><span class=\"nx\">height</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">x</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">y</span><span class=\"p\">(</span><span class=\"nx\">y</span><span class=\"p\">);</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"nx\">shape</span> <span class=\"o\">=</span> <span class=\"nx\">shapes</span><span class=\"p\">.</span><span class=\"nx\">rect</span><span class=\"p\">(</span><span class=\"nx\">width</span><span class=\"p\">,</span> <span class=\"nx\">height</span><span class=\"p\">).</span><span class=\"nx\">x</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">).</span><span class=\"nx\">y</span><span class=\"p\">(</span><span class=\"nx\">y</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">color</span> <span class=\"o\">=</span> <span class=\"nx\">randomColor</span><span class=\"p\">();</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">random</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.25</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">shape</span><span class=\"p\">.</span><span class=\"nx\">fill</span><span class=\"p\">(</span><span class=\"nx\">color</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nx\">shape</span>\n      <span class=\"p\">.</span><span class=\"nx\">stroke</span><span class=\"p\">({</span>\n        <span class=\"nx\">color</span><span class=\"p\">,</span>\n        <span class=\"na\">width</span><span class=\"p\">:</span> <span class=\"mi\">16</span>\n      <span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"nx\">fill</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">transparent</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">shape</span><span class=\"p\">.</span><span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">classList</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">shape</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"nx\">shape</span><span class=\"p\">.</span><span class=\"nx\">rotate</span><span class=\"p\">(</span><span class=\"nx\">random</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">)).</span><span class=\"nx\">scale</span><span class=\"p\">(</span><span class=\"mf\">0.825</span><span class=\"p\">);</span>\n  <span class=\"nx\">shape</span><span class=\"p\">.</span><span class=\"nx\">opacity</span><span class=\"p\">(</span><span class=\"nx\">random</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Here's a breakdown of what's happening here: </p>\n\n<ol>\n<li>Pick a random shape type </li>\n<li>Use svg.js to render a different SVG element based on our shape choice </li>\n<li>Pick a random color from the choices we defined earlier </li>\n<li>25% of the time, apply this color to the shape outline. The other 75% fill the shape with this color</li>\n<li>Add a class of <code>shape</code> to the element so that we can quickly reference it later </li>\n<li>Rotate the shape by some random value and reduce its opacity by a random amount</li>\n</ol>\n\n<p>Phew! Things are getting pretty intense. Let's have a break and marvel at our wonderful generative creation!</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--OSTOdiFQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1zr0g9l0tbnj8bip317e.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--OSTOdiFQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1zr0g9l0tbnj8bip317e.png\" alt=\"Social image with shapes and colors added\" loading=\"lazy\"></a></p>\n\n<p>Woah! 🤩 Looking good folks. We are pretty much there. As you refresh your browser you should see something different each time.</p>\n\n<h3>\n  <a name=\"interactivity\" href=\"#interactivity\" class=\"anchor\">\n  </a>\n  Interactivity\n</h3>\n\n<p>The last step in this tutorial is to make things interactive. This is mostly going to involve attaching event listeners to stuff and running functionality that we have already defined. </p>\n\n<p>To keep things brief, I have commented this code inline. If you do require any more detail or have any questions on this stuff just let me know! </p>\n\n<h4>\n  <a name=\"hooking-up-the-buttons\" href=\"#hooking-up-the-buttons\" class=\"anchor\">\n  </a>\n  Hooking up the buttons\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// regenerate our shapes and shape positions</span>\n<span class=\"nx\">shapesBtn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">click</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">generate</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// set new random color values and update the existing shapes with these colors</span>\n<span class=\"nx\">colorBtn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">click</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">setColors</span><span class=\"p\">();</span>\n\n  <span class=\"c1\">// find all the shapes in our svg and update their fill / stroke</span>\n  <span class=\"nx\">socialImageSVG</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">.shape</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">forEach</span><span class=\"p\">((</span><span class=\"nx\">node</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">getAttribute</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">stroke</span><span class=\"dl\">\"</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">stroke</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">randomColor</span><span class=\"p\">());</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">fill</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">randomColor</span><span class=\"p\">());</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// choose random new alignment options and update the CSS custom properties, regenerate the shapes</span>\n<span class=\"nx\">alignmentBtn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">click</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">socialImageSVG</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">setProperty</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">--align-text-x</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">alignmentOpts</span><span class=\"p\">[</span><span class=\"o\">~~</span><span class=\"nx\">random</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">alignmentOpts</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)]);</span>\n  <span class=\"nx\">socialImageSVG</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">setProperty</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">--align-text-y</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">alignmentOpts</span><span class=\"p\">[</span><span class=\"o\">~~</span><span class=\"nx\">random</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">alignmentOpts</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)]);</span>\n  <span class=\"nx\">generate</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// save our social image as a .png file</span>\n<span class=\"nx\">saveBtn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">click</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">bounds</span> <span class=\"o\">=</span> <span class=\"nx\">socialImageSVG</span><span class=\"p\">.</span><span class=\"nx\">getBoundingClientRect</span><span class=\"p\">();</span>\n\n  <span class=\"c1\">// on save, update the dimensions of our social image so that it exports as expected</span>\n  <span class=\"nx\">socialImageSVG</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">width</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">1200px</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n  <span class=\"nx\">socialImageSVG</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">height</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">630px</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n  <span class=\"nx\">socialImageSVG</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">width</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"mi\">1200</span><span class=\"p\">);</span>\n  <span class=\"nx\">socialImageSVG</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">height</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"mi\">630</span><span class=\"p\">);</span>\n  <span class=\"c1\">// this fixes an odd visual \"cut off\" bug when exporting</span>\n  <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">scrollTo</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">html2canvas</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">.social-image-wrapper</span><span class=\"dl\">\"</span><span class=\"p\">),</span> <span class=\"p\">{</span>\n    <span class=\"na\">width</span><span class=\"p\">:</span> <span class=\"mi\">1200</span><span class=\"p\">,</span>\n    <span class=\"na\">height</span><span class=\"p\">:</span> <span class=\"mi\">630</span><span class=\"p\">,</span>\n    <span class=\"na\">scale</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"c1\">// export our image at 2x resolution so it is nice and crisp on retina devices</span>\n  <span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">canvas</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">canvas</span><span class=\"p\">.</span><span class=\"nx\">toBlob</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">blob</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// restore the social image styles</span>\n      <span class=\"nx\">socialImageSVG</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">width</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">100%</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n      <span class=\"nx\">socialImageSVG</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">height</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">auto</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n      <span class=\"nx\">socialImageSVG</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">width</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"\"</span><span class=\"p\">);</span>\n      <span class=\"nx\">socialImageSVG</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">height</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"\"</span><span class=\"p\">);</span>\n\n      <span class=\"nx\">FileSaver</span><span class=\"p\">.</span><span class=\"nx\">saveAs</span><span class=\"p\">(</span><span class=\"nx\">blob</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">generative-social-image.png</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h4>\n  <a name=\"handling-new-text-input\" href=\"#handling-new-text-input\" class=\"anchor\">\n  </a>\n  Handling new text input\n</h4>\n\n<p>Ok, so all our buttons are hooked up and that's great. There is one last feature to add though. As the user types, we want to update our shape positions. To do this we can use <code>ResizeObserver</code> to run a function each time the width/height dimensions of our text elements change. </p>\n\n<p>Check it out:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">resizeObserver</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ResizeObserver</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">generate</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">resizeObserver</span><span class=\"p\">.</span><span class=\"nx\">observe</span><span class=\"p\">(</span><span class=\"nx\">socialImageTitle</span><span class=\"p\">);</span>\n<span class=\"nx\">resizeObserver</span><span class=\"p\">.</span><span class=\"nx\">observe</span><span class=\"p\">(</span><span class=\"nx\">socialImageMeta</span><span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now as you type you should see your social image update just like the CodePen example. </p>\n\n\n<hr>\n\n<h2>\n  <a name=\"we-made-it\" href=\"#we-made-it\" class=\"anchor\">\n  </a>\n  We made it!\n</h2>\n\n<p>Blimey, that was quite something! The good news is, we are all done. I hope you learned something about generative design here and maybe even picked up some handy little SVG tips. </p>\n\n<p>I think there are lots of places you could take this and would love to hear from you if you create something cool based on this tutorial 😎</p>\n\n<p><strong>If you did enjoy this post, do follow me on Twitter <a href=\"https://twitter.com/georgedoescode\">@georgedoescode</a> for a steady stream of creative coding fun.</strong></p>\n\n<p>Thank you very much for reading! I'll catch you next time ❤️</p>\n\n",
  "body_markdown": "So... it's 2021. The web is an endless sea of beautiful, weird, terrifying stuff. How do you make sure your site cuts through the noise? \n\nWell, alongside some great content, I think an awesome **generative** social image _(just like the one used for this tutorial!)_ could be a good step along the way ✨\n\nLet’s make some!\n\n---\n\n# The end result\n\nFirst things first, let’s skip to the end. Here is the final result of this tutorial: \n\n\n\nIt's a scalable, editable, self-generating social image! If you click on the buttons in the CodePen above or change the text content, you should see the image magically re-design itself 🔮\n\n---\n\n# But... what's it actually for? \n\nA *\"social image\"* as I call them, or *\"meta image\"*, is the little preview that shows up in Slack / Twitter / Facebook whenever you paste a link.\n\nHere are some social image examples found in the wild...\n\nAn awesome textured design from [Stephanie Eckles](https://twitter.com/5t3ph):\n\n![A custom, textured social image](https://dev-to-uploads.s3.amazonaws.com/i/snzbkyx9h95ynlxwr0ig.png)\n\nThe much-loved social image from [DEV](https://dev.to/) + [Ben Halpern](https://twitter.com/bendhalpern): \n\n![DEV community social image](https://dev-to-uploads.s3.amazonaws.com/i/ae44nmwc93g73x7539b6.png)\n\nSome very cool 3D vibes from [Josh Comeau](https://twitter.com/JoshWComeau): \n\n![A custom 3d style social image on Twitter](https://dev-to-uploads.s3.amazonaws.com/i/l7y5oaws07oinhpuuyma.png)\n\nAlthough all of my examples are from Twitter, it's important to remember _(and a huge benefit to creating your social images with SVG)_ that different sites **can** require different dimensions. \n\nLuckily, through the power of `SVG` + `viewBox`, the images we are going to create in this tutorial can be simply resized to any dimensions/aspect ratio. Nice!\n\n---\n\n# Blast off 🚀\n\nOK, I think that's enough preamble. We are ready to start building. Overalls on, folks!\n\n## HTML Markup\n\nFirst things first let's add some HTML for our page: \n\n```html\n<div class=\"wrapper\">\n  <div class=\"social-image-wrapper\">\n  <!-- Save a space for our SVG! -->\n  </div>\n  <div class=\"controls\">\n    <div class=\"controls__randomize\">\n      <p class=\"controls__label\">Randomize:</p>\n      <button class=\"controls__btn controls__btn--alignment\">Alignment</button>\n      <button class=\"controls__btn controls__btn--colors\">Colors</button>\n      <button class=\"controls__btn controls__btn--shapes\">Shapes</button>\n    </div>\n    <button class=\"controls__btn controls__btn--save\">Save</button>\n  </div>\n</div>\n```\n \nIn this code snippet, we are adding the HTML markup we need for our UI and popping everything inside a nice little wrapper `div`.\n\n---\n\n## SVG Markup\n\nOnce we have added the HTML for the user interface it's for the main markup event. I mentioned earlier that our social images are going to be created using the `<svg>` element, so let's add one to our `social-image-wrapper`:\n\n```html\n<div class=\"social-image-wrapper\">\n  <svg\n    viewBox=\"0 0 1200 630\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    class=\"social-image\"\n  >\n    <foreignObject x=\"0\" y=\"0\" width=\"1200\" height=\"630\">\n      <div class=\"social-image__html\">\n        <div class=\"social-image__text\">\n          <h1\n            xmlns=\"http://www.w3.org/1999/xhtml\"\n            class=\"social-image__title\"\n            contenteditable\n          >\n            All of this text is editable... click on it and start typing!\n          </h1>\n          <h2\n            xmlns=\"http://www.w3.org/1999/xhtml\"\n            class=\"social-image__meta\"\n            contenteditable\n          >\n            As you type, the background will adapt itself to the text, making\n            sure the shapes never overlap.\n          </h2>\n        </div>\n      </div>\n    </foreignObject>\n  </svg>\n</div>\n```\n\nThere is quite a bit to unpack here but don't worry! We can work through it together 🤝\n\n### viewBox\n\nFirst off, we are creating our `<svg>` element and defining a [viewBox](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox):\n\n```html\n<svg\n  viewBox=\"0 0 1200 630\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  class=\"social-image\"\n>\n  ...\n</svg>\n```\n\nThe `viewBox` attribute defines the coordinate space in which all of the contents of our `<svg>` will be drawn. In our case, this is `1200x630px`. \n\nThrough the power of `viewBox`, we can position/scale everything relative to a fixed coordinate space, whilst the `<svg>` itself will be able to scale to any size. Powerful stuff ⚡\n\n### foreignObject\n\nNext, we add a `foreignObject` tag filled with some HTML to our `<svg>` element:\n\n```html\n<foreignObject x=\"0\" y=\"0\" width=\"1200\" height=\"630\">\n  ...\n</foreignObject>\n```\n\nThis is where things start getting interesting! [foreignObject](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject) can be used to add content from another XML namespace (in our case, HTML) to an `<svg>` element. \n\nOnce added, this `HTML` will automatically scale to the `viewBox` just like regular `SVG` content. This is incredibly powerful, as it allows us to style the contents of our social image using CSS whilst retaining the fluidity and rendering power of SVG. \n\nMore on that shortly. \n\n__Note: any `HTML` elements added within `foreignObject` must posses an `xmlns=\"http://www.w3.org/1999/xhtml\"` attribute.__\n\n### The contenteditable attribute\n\nThe last thing to check out here is the `contenteditable` attribute added to our `h1` and `h2` tags: \n\n```html\n<h1\n  xmlns=\"http://www.w3.org/1999/xhtml\"\n  class=\"social-image__title\"\n  contenteditable\n>\n  All of this text is editable... click on it and start typing!\n</h1>\n```\n\n[contenteditable](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable) simply allows the user to edit the text within `HTML` tags. This is perfect for us, as it means users will easily be able to add their own content and instantly preview the result.\n\n---\n\n## Style time 💅 \n\nOK, so, we now have all the markup we need to create beautiful social images. Things are probably looking a little bit sad though. We should really fix that. \n\n### Page styles\n\nFirst up, let's add some styles for our UI:\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n:root {\n  --black: hsl(0, 0%, 10%);\n}\n\nbody {\n  width: 100vw;\n  min-height: 100vh;\n  display: grid;\n  place-items: center;\n  padding: 2rem;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica,\n    Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  color: var(--black);\n  line-height: 1;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.wrapper {\n  width: 100%;\n  max-width: 60rem;\n  min-width: 20rem;\n  margin: 0 auto;\n  overflow: hidden;\n}\n\n.controls {\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  margin: 2rem 0;\n}\n\n.controls__label {\n  margin-right: 1rem;\n  font-weight: 500;\n  font-size: 1rem;\n}\n\n.controls__randomize {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n.controls__btn {\n  width: 8rem;\n  height: 2.25rem;\n  margin-right: 1rem;\n  background: #fff;\n  border-radius: 0;\n  border: none;\n  border: 2px solid var(--black);\n  font-family: inherit;\n  color: var(--black);\n  font-size: 1rem;\n  font-weight: 500;\n  cursor: pointer;\n}\n\n.controls__btn:hover {\n  background: var(--black);\n  color: #fff;\n}\n\n.controls__btn--save {\n  position: relative;\n  margin-left: auto;\n  margin-right: 0;\n  background: var(--black);\n  color: #fff;\n}\n\n.controls__btn--save:hover {\n  background: #fff;\n  color: var(--black);\n}\n\n.controls__saving-disabled {\n  font-size: 0.875rem;\n  margin-top: 2rem;\n  font-weight: 500;\n  display: none;\n  font-style: italic;\n}\n\n@media only screen and (max-width: 800px) {\n  body {\n    padding: 0.75rem;\n  }\n\n  .controls__btn {\n    width: 6rem;\n    height: 2rem;\n    font-size: 0.875rem;\n    margin-top: 0.75rem;\n  }\n\n  .controls__label {\n    font-size: 0.875rem;\n    margin-right: 0.5rem;\n    width: 100%;\n  }\n  .controls__btn--save {\n    width: 100%;\n    margin-top: 1.25rem;\n  }\n}\n\n@media only screen and (max-width: 480px) {\n  .controls__btn {\n    margin-right: 0.5rem;\n  }\n}\n```\n\nI won't go too deep on this CSS, as it's not the main feature here. If you do have any questions about these styles, though, do feel free to drop me a message.\n\n### Social image styles\n\nNext, let's add an internal `<style>` tag to our `<svg>` element. This will contain all the styles for the social image itself:\n\n```html\n<svg\n  viewBox=\"0 0 1200 630\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  class=\"social-image\"\n>\n  <style>\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n\n    .social-image {\n      --align-text-x: flex-start;\n      --align-text-y: flex-end;\n\n      width: 100%;\n      background: #f5f7fa;\n      font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n        Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\",\n        \"Segoe UI Symbol\";\n      line-height: 1;\n    }\n\n    .social-image__html {\n      display: flex;\n      height: 100%;\n      justify-content: var(--align-text-x);\n      align-items: var(--align-text-y);\n      padding: 72px;\n    }\n\n    .social-image__text {\n      max-width: 700px;\n    }\n\n    .social-image__title {\n      font-size: 56px;\n      line-height: 68px;\n      font-weight: 800;\n      margin-bottom: 24px;\n      letter-spacing: -0.0125em;\n      outline: none;\n    }\n\n    .social-image__meta {\n      font-weight: 500;\n      font-size: 24px;\n      line-height: 36px;\n      outline: none;\n      letter-spacing: -0.0125em;\n    }\n  </style>\n  ...\n</svg>\n```\n\nWe are adding this CSS to an internal `<style>` tag as I had some issues with `html2canvas` not rendering as expected with the styles living outside of the `<svg>`. It's also nice to keep things contained.\n\nAgain, I won't go into too much detail with the CSS here, but the key effects of this stylesheet are: \n\n- Set up some [CSS Custom Properties](https://developer.mozilla.org/en-US/docs/Web/CSS/--*) to handle the positioning of our text within the social image, in combination with [flexbox](https://developer.mozilla.org/en-US/docs/Web/CSS/flex). We can modify these custom properties later using JavaScript. \n\n- Add some typographic style to the text content. We are using *system fonts* here. It is possible to use custom fonts, but doing so adds a little complexity as the fonts need to be embedded within the `<svg>`. Maybe next time!\n\n### Our progress so far\n \nNow that both of these stylesheets have been added in their respective positions, you should hopefully be seeing something like this in your browser: \n\n![A simple social image design being resized](https://dev-to-uploads.s3.amazonaws.com/i/fpfnldjdn4qcaxo3xh3o.gif)\n\nPretty cool eh! As you resize your browser, check out how our HTML magically scales along with our `<svg>` element ✨\n\nAt this point, we are all set up and ready to make things beautiful. Let's head over to JS-town and make that happen 🎨\n\n---\n\n## Next stop, JavaScript central 🚂\n\n### Package installation\n\nLet's get the boring stuff out of the way first and install the packages we need for this project. The packages we will be using are: \n\n- [svg.js](https://www.npmjs.com/package/svgjs) - Used to simplify SVG scripting (creating and updating SVG elements such as `<circle>`)\n- [html2canvas](https://www.npmjs.com/package/html2canvas) - Used to take a screenshot of our `<svg>` social image so that it can be downloaded\n- [file-saver](https://www.npmjs.com/package/file-saver) - Used to handle the saving of our social image once it has been captured by `html2canvas`\n- [resize-observer-polyfill](https://www.npmjs.com/package/resize-observer-polyfill) - Adds a polyfill for `ResizeObserver` to browsers that do not support it\n\nIf you are following along on CodePen, you can simply add these imports to your JS file: \n\n```javascript\nimport { SVG } from \"https://cdn.skypack.dev/@svgdotjs/svg.js\";\nimport html2canvas from \"https://cdn.skypack.dev/html2canvas@1.0.0-rc.7\";\nimport ResizeObserver from \"https://cdn.skypack.dev/resize-observer-polyfill@1.5.1\";\nimport FileSaver from \"https://cdn.skypack.dev/file-saver@2.0.5\";\n```\n\nIf you are working in your own environment, you can install the packages you need with: \n\n```bash\nnpm i svgjs html2canvas resize-observer-polyfill file-saver \n```\n\nThe packages can then be imported like so: \n\n```javascript\nimport { SVG } from \"svg.js\";\nimport html2canvas from \"html2canvas\";\nimport ResizeObserver from \"resize-observer-polyfill\";\nimport FileSaver from \"file-saver\";\n```\n\n**Note: If you are working in your own environment, you will need a bundler such as Webpack or Parcel to handle these imports.**\n\n### DOM Element references \n\nNow that we have all the packages we need for this project, we should add some variables that reference our various DOM elements **(buttons, the social image svg, etc)** \n\nTo do so we can add: \n\n```javascript\nconst socialImageSVG = document.querySelector(\".social-image\");\nconst socialImageTitle = document.querySelector(\".social-image__title\");\nconst socialImageMeta = document.querySelector(\".social-image__meta\");\n\nconst saveBtn = document.querySelector(\".controls__btn--save\");\nconst alignmentBtn = document.querySelector(\".controls__btn--alignment\");\nconst colorBtn = document.querySelector(\".controls__btn--colors\");\nconst shapesBtn = document.querySelector(\".controls__btn--shapes\");\n```\n\n### Colors \n\nNext up on the list is defining some color variables. These will store a bunch of HSL colors that we will define a little later and eventually use to color our social image: \n\n```javascript\nlet baseColor;\nlet baseColorWhite;\nlet baseColorBlack;\n\nlet complimentaryColor1;\nlet complimentaryColor2;\n\nlet shapeColors;\n```\n\nNice. All our colors are empty right now, but that's fine.\n\n### Alignment options \n\nIn addition to random colors, our social image will also allow random alignment of its text. To facilitate this a little further down the track, let's store the `flex` properties we want to use to control alignment in an array: \n\n```javascript\nconst alignmentOpts = [\"flex-start\", \"flex-end\", \"center\"];\n```\n\nLovely. We will use these values shortly. \n\n### Set up an svg.js instance \n\nWe are going to use [svg.js](https://svgjs.com/docs/3.0/) here to allow for quick, easy SVG scripting. Without svg.js, creating and updating SVG elements can get **very** wordy.\n\nWe can create a new svg.js instance like so: \n\n```javascript\nconst shapes = SVG(socialImageSVG).group();\n```\n\nWhat this line is saying is - Create me a new SVG `<group>` element, inside our root `<svg>` that I can easily draw into with methods such as `shapes.rect(...)`.\n\n### Adding the `random()` utility function \n\nBefore we go any further, lets quickly add a small utility function `random`, which generates a random number within a range: \n\n```javascript\nfunction random(min, max) {\n  return Math.random() * (max - min) + min;\n}\n```\n\nThis is a super handy utility. Definitely save it for later if you fancy trying your hand at some more generative stuff! I use it all the time. \n\n### Choose some random colors \n\nOften in my tutorials, I hold the colors until right at the end, but I think for this one we should define them early. They are such an integral part of the end result and having them set will make following the code in the upcoming steps a  bit easier. \n\nTo generate some random colors, we can add the following `setColors` function:\n\n```javascript\nfunction setColors() {\n  const baseHue = random(0, 360);\n  const saturation = random(60, 90);\n\n  baseColor = `hsl(${baseHue}, ${saturation}%, 60%)`;\n  baseColorWhite = `hsl(${baseHue}, ${saturation}%, 97%)`;\n  baseColorBlack = `hsl(${baseHue}, 95%, 3%)`;\n\n  complimentaryColor1 = `hsl(${baseHue + 90}, ${saturation}%, 60%)`;\n  complimentaryColor2 = `hsl(${baseHue + 180}, ${saturation}%, 60%)`;\n\n  shapeColors = [complimentaryColor1, complimentaryColor2, baseColor];\n\n  socialImageSVG.style.background = baseColorWhite;\n  socialImageSVG.style.color = baseColorBlack;\n}\n```\n\nHere's what this function is doing: \n\n1. Pick a random hue, somewhere between 0 and 360\n2. Pick a random saturation, somewhere between 60 and 90\n3. Define a base color, a very dark color, and a very light color all based on the same hue. This is a great way to create simple color palettes and keep things consistent \n4. Choose two complementary colors, each with a hue 90 degrees away from the previous, with the same saturation and lightness. This is another great, simple way of finding colors that work together\n5. Store the complimentary and base colors in our `shapeColors` array. We will use these later to fill in our shapes \n6. Set the background of our social image to the very light color, and it's text color to the very dark color\n\nNow if we call `setColors()`, we should see the background and text colors of our social image change. It will be very subtle. Hopefully, something like this: \n\n![A colorful social image](https://dev-to-uploads.s3.amazonaws.com/i/pz3wn8cp7lc1diqwfysg.png)\n\nLooking good. Onwards!\n\n### Creating random shape positions \n\nNext on our list is to generate some random, non-overlapping rectangles to position our shapes within. We want these rectangles to not only avoid overlapping each other but also avoid overlapping our text.\n\n#### A small problem\n\nTo avoid overlapping our text when creating random rectangles, we need to know each text element's dimensions **relative** to our `<svg>`'s `viewBox`. \n\nOften for this purpose we would use [getBBox](https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement/getBBox) however `getBBox` is only available for SVG elements, and our text is HTML. \n\nThis isn't so bad, we can create our own `relativeBounds` function that will solve this for us in no time!\n\nHere it is: \n\n```javascript\nfunction relativeBounds(svg, HTMLElement) {\n  const { x, y, width, height } = HTMLElement.getBoundingClientRect();\n\n  const startPoint = svg.createSVGPoint();\n  startPoint.x = x;\n  startPoint.y = y;\n\n  const endPoint = svg.createSVGPoint();\n  endPoint.x = x + width;\n  endPoint.y = y + height;\n\n  const startPointTransformed = startPoint.matrixTransform(\n    svg.getScreenCTM().inverse()\n  );\n  const endPointTransformed = endPoint.matrixTransform(\n    svg.getScreenCTM().inverse()\n  );\n\n  return {\n    x: startPointTransformed.x,\n    y: startPointTransformed.y,\n    width: endPointTransformed.x - startPointTransformed.x,\n    height: endPointTransformed.y - startPointTransformed.y\n  };\n}\n```\n\nCool! I won't go too deep on this function as I appreciate it is rather dry, but it essentially gives us `getBBox` functionality for HTML elements within an SVG.\n\nNow that we have our `relativeBounds` function, we can generate our shape positions. \n\nLets add a `generateRandomRects` and a `detectRectCollision` function: \n\n```javascript\nfunction generateRandomRects(existing) {\n  const rects = [...existing];\n  const tries = 250;\n  const maxShapes = 6;\n\n  for (let i = 0; i < tries; i++) {\n    if (rects.length === maxShapes + existing.length) break;\n\n    const size = random(100, 600);\n\n    const rect = {\n      x: random(-size, 1200),\n      y: random(-size, 630),\n      width: size,\n      height: size\n    };\n\n    if (!rects.some((r) => detectRectCollision(r, rect))) {\n      rects.push(rect);\n    }\n  }\n\n  return rects;\n}\n\nfunction detectRectCollision(rect1, rect2, padding = 32) {\n  return (\n    rect1.x < rect2.x + rect2.width + padding &&\n    rect1.x + rect1.width + padding > rect2.x &&\n    rect1.y < rect2.y + rect2.height + padding &&\n    rect1.y + rect1.height + padding > rect2.y\n  );\n}\n```\n\nTo break this down: \n\n1. Store some existing rectangles in an array (in our case, the surrounding rectangles, or bounds, of our text elements) \n2. For a certain amount of tries: create a randomly sized rectangle. If this new rectangle does not overlap with any of the other rectangles, store it.\n3. Once all of the tries are used up, or the maximum number of shapes reached, return the random rectangles that we managed to generate\n\nYou may notice a funny looking `padding` option in our rectangle collision code. This defines the minimum distance between rectangles. I found it helped make things look a little neater. \n\n#### A note on imperfection\n\nThis is far from a perfect function. It is rather slow as a result of using brute force to place our rectangles, and there is no guarantee `maxShapes` will be reached with our number of tries. \n\nDoes that mean it's bad, though? No way. \n\nWe are worried more about visual results than algorithmic efficiency right now, and these values seem to produce pretty _aesthetic_ looking results. **The real challenge of generative design lies the tweaking of values like this.**\n\nYou should experiment with changing these parameters. Try changing the maximum number of shapes, maybe tweak the size of our the or increase the maximum number of tries. Check out the results. Repeat. There are no right answers here! \n\n### Drawing our shapes \n\nAlright, so we have some code ready to generate the non-overlapping rectangles. Let's bring them to life! \n\nFirst, let's add a new `generate` function: \n\n```javascript\nfunction generate() {\n  shapes.clear();\n\n  const htmlRects = [\n    relativeBounds(socialImageSVG, socialImageTitle),\n    relativeBounds(socialImageSVG, socialImageMeta)\n  ];\n\n  const rects = generateRandomRects(htmlRects);\n\n  for (const rect of rects.slice(2, rects.length)) {\n    drawRandomShape(rect);\n  }\n}\n```\n\nThis is actually quite a small block of code. `generateRandomRects` is doing most of the heavy lifting here. We are saying: \n\n1. Clear out any shapes that already exist (this will be useful later when dynamically re-generating the image)\n2. Store the bounds of our two text elements, relative to the `viewBox`, in an array\n3. Generate a bunch of random, non-overlapping rectangles\n4. For every random rectangle (apart from the first two text rectangles) draw a random shape **within** it.\n\nNow, we don't actually have a `drawRandomShape` function right now. Let's add one. As a simple start, try this: \n\n```javascript\nfunction drawRandomShape(rect) {\n  const { x, y, width, height } = rect;\n  shapes.rect(width, height).x(x).y(y);\n}\n```\n\nOnce you have added `drawRandomShape`, you can safely call `generate` without your browser getting mad at you: \n\n```javascript\ngenerate();\n```\n\nIf you check out the browser now, you should see something like this: \n\n![Social image with random rectangles](https://dev-to-uploads.s3.amazonaws.com/i/vnock9439moo7n3l8jdt.png)\n\nPretty nice! These are the random rectangles we generated earlier, presented in a very simple way. \n\nWe can expand, though. Let's update`drawRandomShape` and add a small `randomColor` utility function: \n\n```javascript\nfunction randomColor() {\n  // ~~ === shorthand for Math.floor()\n  return shapeColors[~~random(0, shapeColors.length)];\n}\n\nfunction drawRandomShape({ x, y, width, height }) {\n  const shapeChoices = [\"rect\", \"ellipse\", \"triangle\"];\n  let shape;\n\n  switch (shapeChoices[~~random(0, shapeChoices.length)]) {\n    case \"ellipse\":\n      shape = shapes.ellipse(width, height).x(x).y(y);\n      break;\n    case \"triangle\":\n      shape = shapes\n        .polygon(`0 ${height}, ${width / 2} 0, ${width} ${height}`)\n        .x(x)\n        .y(y);\n      break;\n    default:\n      shape = shapes.rect(width, height).x(x).y(y);\n  }\n\n  const color = randomColor();\n\n  if (random(0, 1) > 0.25) {\n    shape.fill(color);\n  } else {\n    shape\n      .stroke({\n        color,\n        width: 16\n      })\n      .fill(\"transparent\");\n  }\n\n  shape.node.classList.add(\"shape\");\n  shape.rotate(random(0, 90)).scale(0.825);\n  shape.opacity(random(0.5, 1));\n}\n```\n\nHere's a breakdown of what's happening here: \n\n1. Pick a random shape type \n2. Use svg.js to render a different SVG element based on our shape choice \n3. Pick a random color from the choices we defined earlier \n4. 25% of the time, apply this color to the shape outline. The other 75% fill the shape with this color\n5. Add a class of `shape` to the element so that we can quickly reference it later \n5. Rotate the shape by some random value and reduce its opacity by a random amount\n\nPhew! Things are getting pretty intense. Let's have a break and marvel at our wonderful generative creation!\n\n![Social image with shapes and colors added](https://dev-to-uploads.s3.amazonaws.com/i/1zr0g9l0tbnj8bip317e.png)\n\nWoah! 🤩 Looking good folks. We are pretty much there. As you refresh your browser you should see something different each time.\n\n### Interactivity \n\nThe last step in this tutorial is to make things interactive. This is mostly going to involve attaching event listeners to stuff and running functionality that we have already defined. \n\nTo keep things brief, I have commented this code inline. If you do require any more detail or have any questions on this stuff just let me know! \n\n#### Hooking up the buttons\n\n```javascript\n// regenerate our shapes and shape positions\nshapesBtn.addEventListener(\"click\", () => {\n  generate();\n});\n\n// set new random color values and update the existing shapes with these colors\ncolorBtn.addEventListener(\"click\", () => {\n  setColors();\n\n  // find all the shapes in our svg and update their fill / stroke\n  socialImageSVG.querySelectorAll(\".shape\").forEach((node) => {\n    if (node.getAttribute(\"stroke\")) {\n      node.setAttribute(\"stroke\", randomColor());\n    } else {\n      node.setAttribute(\"fill\", randomColor());\n    }\n  });\n});\n\n// choose random new alignment options and update the CSS custom properties, regenerate the shapes\nalignmentBtn.addEventListener(\"click\", () => {\n  socialImageSVG.style.setProperty(\"--align-text-x\", alignmentOpts[~~random(0, alignmentOpts.length)]);\n  socialImageSVG.style.setProperty(\"--align-text-y\", alignmentOpts[~~random(0, alignmentOpts.length)]);\n  generate();\n});\n\n// save our social image as a .png file\nsaveBtn.addEventListener(\"click\", () => {\n  const bounds = socialImageSVG.getBoundingClientRect();\n\n  // on save, update the dimensions of our social image so that it exports as expected\n  socialImageSVG.style.width = \"1200px\";\n  socialImageSVG.style.height = \"630px\";\n  socialImageSVG.setAttribute(\"width\", 1200);\n  socialImageSVG.setAttribute(\"height\", 630);\n  // this fixes an odd visual \"cut off\" bug when exporting\n  window.scrollTo(0, 0);\n\n  html2canvas(document.querySelector(\".social-image-wrapper\"), {\n    width: 1200,\n    height: 630,\n    scale: 2 // export our image at 2x resolution so it is nice and crisp on retina devices\n  }).then((canvas) => {\n    canvas.toBlob(function (blob) {\n      // restore the social image styles\n      socialImageSVG.style.width = \"100%\";\n      socialImageSVG.style.height = \"auto\";\n      socialImageSVG.setAttribute(\"width\", \"\");\n      socialImageSVG.setAttribute(\"height\", \"\");\n\n      FileSaver.saveAs(blob, \"generative-social-image.png\");\n    });\n  });\n});\n```\n\n#### Handling new text input \n\nOk, so all our buttons are hooked up and that's great. There is one last feature to add though. As the user types, we want to update our shape positions. To do this we can use `ResizeObserver` to run a function each time the width/height dimensions of our text elements change. \n\nCheck it out: \n\n```javascript\nconst resizeObserver = new ResizeObserver(() => {\n  generate();\n});\n\nresizeObserver.observe(socialImageTitle);\nresizeObserver.observe(socialImageMeta);\n```\n\nNow as you type you should see your social image update just like the CodePen example. \n\n---\n\n## We made it! \n\nBlimey, that was quite something! The good news is, we are all done. I hope you learned something about generative design here and maybe even picked up some handy little SVG tips. \n\nI think there are lots of places you could take this and would love to hear from you if you create something cool based on this tutorial 😎\n\n**If you did enjoy this post, do follow me on Twitter [@georgedoescode](https://twitter.com/georgedoescode) for a steady stream of creative coding fun.**\n\nThank you very much for reading! I'll catch you next time ❤️",
  "user": {
    "name": "George Francis",
    "username": "georgedoescode",
    "twitter_username": "georgedoescode",
    "github_username": "georgedoescode",
    "website_url": null,
    "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--PFaKYWYr--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/361652/04fa62cc-e837-4dfc-ad21-dc8219102d69.png",
    "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--AS2R2MrQ--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/361652/04fa62cc-e837-4dfc-ad21-dc8219102d69.png"
  }
}
